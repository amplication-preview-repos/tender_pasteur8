/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Item } from "../../item/base/Item";
import { EnumCharacterStatuses } from "./EnumCharacterStatuses";
import { Tracker } from "../../tracker/base/Tracker";
import { TraitSet } from "../../traitSet/base/TraitSet";
import { User } from "../../user/base/User";

@ObjectType()
class Character {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  image!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Item],
  })
  @ValidateNested()
  @Type(() => Item)
  @IsOptional()
  items?: Array<Item>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumCharacterStatuses,
  })
  @IsEnum(EnumCharacterStatuses)
  @IsOptional()
  @Field(() => EnumCharacterStatuses, {
    nullable: true,
  })
  statuses?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => [Tracker],
  })
  @ValidateNested()
  @Type(() => Tracker)
  @IsOptional()
  trackers?: Array<Tracker>;

  @ApiProperty({
    required: false,
    type: () => [TraitSet],
  })
  @ValidateNested()
  @Type(() => TraitSet)
  @IsOptional()
  traitSets?: Array<TraitSet>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Character as Character };
