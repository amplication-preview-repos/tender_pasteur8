/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CharacterService } from "../character.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CharacterCreateInput } from "./CharacterCreateInput";
import { Character } from "./Character";
import { CharacterFindManyArgs } from "./CharacterFindManyArgs";
import { CharacterWhereUniqueInput } from "./CharacterWhereUniqueInput";
import { CharacterUpdateInput } from "./CharacterUpdateInput";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { ItemWhereUniqueInput } from "../../item/base/ItemWhereUniqueInput";
import { TrackerFindManyArgs } from "../../tracker/base/TrackerFindManyArgs";
import { Tracker } from "../../tracker/base/Tracker";
import { TrackerWhereUniqueInput } from "../../tracker/base/TrackerWhereUniqueInput";
import { TraitSetFindManyArgs } from "../../traitSet/base/TraitSetFindManyArgs";
import { TraitSet } from "../../traitSet/base/TraitSet";
import { TraitSetWhereUniqueInput } from "../../traitSet/base/TraitSetWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CharacterControllerBase {
  constructor(
    protected readonly service: CharacterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Character })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CharacterCreateInput,
  })
  async createCharacter(
    @common.Body() data: CharacterCreateInput
  ): Promise<Character> {
    return await this.service.createCharacter({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        image: true,
        name: true,
        statuses: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Character] })
  @ApiNestedQuery(CharacterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async characters(@common.Req() request: Request): Promise<Character[]> {
    const args = plainToClass(CharacterFindManyArgs, request.query);
    return this.service.characters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        image: true,
        name: true,
        statuses: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async character(
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Character | null> {
    const result = await this.service.character({
      where: params,
      select: {
        createdAt: true,
        id: true,
        image: true,
        name: true,
        statuses: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CharacterUpdateInput,
  })
  async updateCharacter(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() data: CharacterUpdateInput
  ): Promise<Character | null> {
    try {
      return await this.service.updateCharacter({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          image: true,
          name: true,
          statuses: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCharacter(
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Character | null> {
    try {
      return await this.service.deleteCharacter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          image: true,
          name: true,
          statuses: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/items")
  @ApiNestedQuery(ItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async findItems(
    @common.Req() request: Request,
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Item[]> {
    const query = plainToClass(ItemFindManyArgs, request.query);
    const results = await this.service.findItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        image: true,
        isPublic: true,

        itemBonuses: {
          select: {
            id: true,
          },
        },

        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async connectItems(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        connect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async updateItems(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        set: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async disconnectItems(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: ItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        disconnect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/trackers")
  @ApiNestedQuery(TrackerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "read",
    possession: "any",
  })
  async findTrackers(
    @common.Req() request: Request,
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Tracker[]> {
    const query = plainToClass(TrackerFindManyArgs, request.query);
    const results = await this.service.findTrackers(params.id, {
      ...query,
      select: {
        character: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        numberField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/trackers")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async connectTrackers(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TrackerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trackers: {
        connect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/trackers")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async updateTrackers(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TrackerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trackers: {
        set: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/trackers")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async disconnectTrackers(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TrackerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trackers: {
        disconnect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/traitSets")
  @ApiNestedQuery(TraitSetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "any",
  })
  async findTraitSets(
    @common.Req() request: Request,
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<TraitSet[]> {
    const query = plainToClass(TraitSetFindManyArgs, request.query);
    const results = await this.service.findTraitSets(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/traitSets")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async connectTraitSets(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TraitSetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traitSets: {
        connect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/traitSets")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async updateTraitSets(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TraitSetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traitSets: {
        set: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/traitSets")
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "update",
    possession: "any",
  })
  async disconnectTraitSets(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: TraitSetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traitSets: {
        disconnect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }
}
