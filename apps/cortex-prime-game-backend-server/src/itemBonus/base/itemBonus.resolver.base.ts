/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ItemBonus } from "./ItemBonus";
import { ItemBonusCountArgs } from "./ItemBonusCountArgs";
import { ItemBonusFindManyArgs } from "./ItemBonusFindManyArgs";
import { ItemBonusFindUniqueArgs } from "./ItemBonusFindUniqueArgs";
import { CreateItemBonusArgs } from "./CreateItemBonusArgs";
import { UpdateItemBonusArgs } from "./UpdateItemBonusArgs";
import { DeleteItemBonusArgs } from "./DeleteItemBonusArgs";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { ItemBonusService } from "../itemBonus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemBonus)
export class ItemBonusResolverBase {
  constructor(
    protected readonly service: ItemBonusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "read",
    possession: "any",
  })
  async _itemBonusesMeta(
    @graphql.Args() args: ItemBonusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemBonus])
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "read",
    possession: "any",
  })
  async itemBonuses(
    @graphql.Args() args: ItemBonusFindManyArgs
  ): Promise<ItemBonus[]> {
    return this.service.itemBonuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemBonus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "read",
    possession: "own",
  })
  async itemBonus(
    @graphql.Args() args: ItemBonusFindUniqueArgs
  ): Promise<ItemBonus | null> {
    const result = await this.service.itemBonus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemBonus)
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "create",
    possession: "any",
  })
  async createItemBonus(
    @graphql.Args() args: CreateItemBonusArgs
  ): Promise<ItemBonus> {
    return await this.service.createItemBonus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemBonus)
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "update",
    possession: "any",
  })
  async updateItemBonus(
    @graphql.Args() args: UpdateItemBonusArgs
  ): Promise<ItemBonus | null> {
    try {
      return await this.service.updateItemBonus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemBonus)
  @nestAccessControl.UseRoles({
    resource: "ItemBonus",
    action: "delete",
    possession: "any",
  })
  async deleteItemBonus(
    @graphql.Args() args: DeleteItemBonusArgs
  ): Promise<ItemBonus | null> {
    try {
      return await this.service.deleteItemBonus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Item], { name: "items" })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async findItems(
    @graphql.Parent() parent: ItemBonus,
    @graphql.Args() args: ItemFindManyArgs
  ): Promise<Item[]> {
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
