/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemBonus as PrismaItemBonus,
  Item as PrismaItem,
} from "@prisma/client";

export class ItemBonusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemBonusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemBonus.count(args);
  }

  async itemBonuses(
    args: Prisma.ItemBonusFindManyArgs
  ): Promise<PrismaItemBonus[]> {
    return this.prisma.itemBonus.findMany(args);
  }
  async itemBonus(
    args: Prisma.ItemBonusFindUniqueArgs
  ): Promise<PrismaItemBonus | null> {
    return this.prisma.itemBonus.findUnique(args);
  }
  async createItemBonus(
    args: Prisma.ItemBonusCreateArgs
  ): Promise<PrismaItemBonus> {
    return this.prisma.itemBonus.create(args);
  }
  async updateItemBonus(
    args: Prisma.ItemBonusUpdateArgs
  ): Promise<PrismaItemBonus> {
    return this.prisma.itemBonus.update(args);
  }
  async deleteItemBonus(
    args: Prisma.ItemBonusDeleteArgs
  ): Promise<PrismaItemBonus> {
    return this.prisma.itemBonus.delete(args);
  }

  async findItems(
    parentId: string,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.itemBonus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .items(args);
  }
}
