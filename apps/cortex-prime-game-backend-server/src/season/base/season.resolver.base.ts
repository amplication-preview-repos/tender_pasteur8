/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Season } from "./Season";
import { SeasonCountArgs } from "./SeasonCountArgs";
import { SeasonFindManyArgs } from "./SeasonFindManyArgs";
import { SeasonFindUniqueArgs } from "./SeasonFindUniqueArgs";
import { CreateSeasonArgs } from "./CreateSeasonArgs";
import { UpdateSeasonArgs } from "./UpdateSeasonArgs";
import { DeleteSeasonArgs } from "./DeleteSeasonArgs";
import { Time } from "../../time/base/Time";
import { SeasonService } from "../season.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Season)
export class SeasonResolverBase {
  constructor(
    protected readonly service: SeasonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "read",
    possession: "any",
  })
  async _seasonsMeta(
    @graphql.Args() args: SeasonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Season])
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "read",
    possession: "any",
  })
  async seasons(@graphql.Args() args: SeasonFindManyArgs): Promise<Season[]> {
    return this.service.seasons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Season, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "read",
    possession: "own",
  })
  async season(
    @graphql.Args() args: SeasonFindUniqueArgs
  ): Promise<Season | null> {
    const result = await this.service.season(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Season)
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "create",
    possession: "any",
  })
  async createSeason(@graphql.Args() args: CreateSeasonArgs): Promise<Season> {
    return await this.service.createSeason({
      ...args,
      data: {
        ...args.data,

        time: args.data.time
          ? {
              connect: args.data.time,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Season)
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "update",
    possession: "any",
  })
  async updateSeason(
    @graphql.Args() args: UpdateSeasonArgs
  ): Promise<Season | null> {
    try {
      return await this.service.updateSeason({
        ...args,
        data: {
          ...args.data,

          time: args.data.time
            ? {
                connect: args.data.time,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Season)
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "delete",
    possession: "any",
  })
  async deleteSeason(
    @graphql.Args() args: DeleteSeasonArgs
  ): Promise<Season | null> {
    try {
      return await this.service.deleteSeason(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Time, {
    nullable: true,
    name: "time",
  })
  @nestAccessControl.UseRoles({
    resource: "Time",
    action: "read",
    possession: "any",
  })
  async getTime(@graphql.Parent() parent: Season): Promise<Time | null> {
    const result = await this.service.getTime(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
