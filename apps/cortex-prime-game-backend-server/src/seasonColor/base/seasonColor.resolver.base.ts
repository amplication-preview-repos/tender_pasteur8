/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SeasonColor } from "./SeasonColor";
import { SeasonColorCountArgs } from "./SeasonColorCountArgs";
import { SeasonColorFindManyArgs } from "./SeasonColorFindManyArgs";
import { SeasonColorFindUniqueArgs } from "./SeasonColorFindUniqueArgs";
import { CreateSeasonColorArgs } from "./CreateSeasonColorArgs";
import { UpdateSeasonColorArgs } from "./UpdateSeasonColorArgs";
import { DeleteSeasonColorArgs } from "./DeleteSeasonColorArgs";
import { SeasonColorService } from "../seasonColor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SeasonColor)
export class SeasonColorResolverBase {
  constructor(
    protected readonly service: SeasonColorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "read",
    possession: "any",
  })
  async _seasonColorsMeta(
    @graphql.Args() args: SeasonColorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SeasonColor])
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "read",
    possession: "any",
  })
  async seasonColors(
    @graphql.Args() args: SeasonColorFindManyArgs
  ): Promise<SeasonColor[]> {
    return this.service.seasonColors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SeasonColor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "read",
    possession: "own",
  })
  async seasonColor(
    @graphql.Args() args: SeasonColorFindUniqueArgs
  ): Promise<SeasonColor | null> {
    const result = await this.service.seasonColor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeasonColor)
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "create",
    possession: "any",
  })
  async createSeasonColor(
    @graphql.Args() args: CreateSeasonColorArgs
  ): Promise<SeasonColor> {
    return await this.service.createSeasonColor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeasonColor)
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "update",
    possession: "any",
  })
  async updateSeasonColor(
    @graphql.Args() args: UpdateSeasonColorArgs
  ): Promise<SeasonColor | null> {
    try {
      return await this.service.updateSeasonColor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SeasonColor)
  @nestAccessControl.UseRoles({
    resource: "SeasonColor",
    action: "delete",
    possession: "any",
  })
  async deleteSeasonColor(
    @graphql.Args() args: DeleteSeasonColorArgs
  ): Promise<SeasonColor | null> {
    try {
      return await this.service.deleteSeasonColor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
