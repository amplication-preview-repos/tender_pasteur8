/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SeasonColor as PrismaSeasonColor } from "@prisma/client";

export class SeasonColorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SeasonColorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.seasonColor.count(args);
  }

  async seasonColors(
    args: Prisma.SeasonColorFindManyArgs
  ): Promise<PrismaSeasonColor[]> {
    return this.prisma.seasonColor.findMany(args);
  }
  async seasonColor(
    args: Prisma.SeasonColorFindUniqueArgs
  ): Promise<PrismaSeasonColor | null> {
    return this.prisma.seasonColor.findUnique(args);
  }
  async createSeasonColor(
    args: Prisma.SeasonColorCreateArgs
  ): Promise<PrismaSeasonColor> {
    return this.prisma.seasonColor.create(args);
  }
  async updateSeasonColor(
    args: Prisma.SeasonColorUpdateArgs
  ): Promise<PrismaSeasonColor> {
    return this.prisma.seasonColor.update(args);
  }
  async deleteSeasonColor(
    args: Prisma.SeasonColorDeleteArgs
  ): Promise<PrismaSeasonColor> {
    return this.prisma.seasonColor.delete(args);
  }
}
