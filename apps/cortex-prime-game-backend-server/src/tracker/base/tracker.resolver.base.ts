/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tracker } from "./Tracker";
import { TrackerCountArgs } from "./TrackerCountArgs";
import { TrackerFindManyArgs } from "./TrackerFindManyArgs";
import { TrackerFindUniqueArgs } from "./TrackerFindUniqueArgs";
import { CreateTrackerArgs } from "./CreateTrackerArgs";
import { UpdateTrackerArgs } from "./UpdateTrackerArgs";
import { DeleteTrackerArgs } from "./DeleteTrackerArgs";
import { Character } from "../../character/base/Character";
import { TrackerService } from "../tracker.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tracker)
export class TrackerResolverBase {
  constructor(
    protected readonly service: TrackerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "read",
    possession: "any",
  })
  async _trackersMeta(
    @graphql.Args() args: TrackerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tracker])
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "read",
    possession: "any",
  })
  async trackers(
    @graphql.Args() args: TrackerFindManyArgs
  ): Promise<Tracker[]> {
    return this.service.trackers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tracker, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "read",
    possession: "own",
  })
  async tracker(
    @graphql.Args() args: TrackerFindUniqueArgs
  ): Promise<Tracker | null> {
    const result = await this.service.tracker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tracker)
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "create",
    possession: "any",
  })
  async createTracker(
    @graphql.Args() args: CreateTrackerArgs
  ): Promise<Tracker> {
    return await this.service.createTracker({
      ...args,
      data: {
        ...args.data,

        character: args.data.character
          ? {
              connect: args.data.character,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tracker)
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "update",
    possession: "any",
  })
  async updateTracker(
    @graphql.Args() args: UpdateTrackerArgs
  ): Promise<Tracker | null> {
    try {
      return await this.service.updateTracker({
        ...args,
        data: {
          ...args.data,

          character: args.data.character
            ? {
                connect: args.data.character,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tracker)
  @nestAccessControl.UseRoles({
    resource: "Tracker",
    action: "delete",
    possession: "any",
  })
  async deleteTracker(
    @graphql.Args() args: DeleteTrackerArgs
  ): Promise<Tracker | null> {
    try {
      return await this.service.deleteTracker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Character, {
    nullable: true,
    name: "character",
  })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  async getCharacter(
    @graphql.Parent() parent: Tracker
  ): Promise<Character | null> {
    const result = await this.service.getCharacter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
