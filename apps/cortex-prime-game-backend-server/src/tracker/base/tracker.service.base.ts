/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tracker as PrismaTracker,
  Character as PrismaCharacter,
} from "@prisma/client";

export class TrackerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TrackerCountArgs, "select">): Promise<number> {
    return this.prisma.tracker.count(args);
  }

  async trackers(args: Prisma.TrackerFindManyArgs): Promise<PrismaTracker[]> {
    return this.prisma.tracker.findMany(args);
  }
  async tracker(
    args: Prisma.TrackerFindUniqueArgs
  ): Promise<PrismaTracker | null> {
    return this.prisma.tracker.findUnique(args);
  }
  async createTracker(args: Prisma.TrackerCreateArgs): Promise<PrismaTracker> {
    return this.prisma.tracker.create(args);
  }
  async updateTracker(args: Prisma.TrackerUpdateArgs): Promise<PrismaTracker> {
    return this.prisma.tracker.update(args);
  }
  async deleteTracker(args: Prisma.TrackerDeleteArgs): Promise<PrismaTracker> {
    return this.prisma.tracker.delete(args);
  }

  async getCharacter(parentId: string): Promise<PrismaCharacter | null> {
    return this.prisma.tracker
      .findUnique({
        where: { id: parentId },
      })
      .character();
  }
}
