/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Trait } from "./Trait";
import { TraitCountArgs } from "./TraitCountArgs";
import { TraitFindManyArgs } from "./TraitFindManyArgs";
import { TraitFindUniqueArgs } from "./TraitFindUniqueArgs";
import { CreateTraitArgs } from "./CreateTraitArgs";
import { UpdateTraitArgs } from "./UpdateTraitArgs";
import { DeleteTraitArgs } from "./DeleteTraitArgs";
import { TraitSet } from "../../traitSet/base/TraitSet";
import { TraitService } from "../trait.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Trait)
export class TraitResolverBase {
  constructor(
    protected readonly service: TraitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "read",
    possession: "any",
  })
  async _traitsMeta(
    @graphql.Args() args: TraitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Trait])
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "read",
    possession: "any",
  })
  async traits(@graphql.Args() args: TraitFindManyArgs): Promise<Trait[]> {
    return this.service.traits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Trait, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "read",
    possession: "own",
  })
  async trait(
    @graphql.Args() args: TraitFindUniqueArgs
  ): Promise<Trait | null> {
    const result = await this.service.trait(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trait)
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "create",
    possession: "any",
  })
  async createTrait(@graphql.Args() args: CreateTraitArgs): Promise<Trait> {
    return await this.service.createTrait({
      ...args,
      data: {
        ...args.data,

        traitSet: args.data.traitSet
          ? {
              connect: args.data.traitSet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trait)
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "update",
    possession: "any",
  })
  async updateTrait(
    @graphql.Args() args: UpdateTraitArgs
  ): Promise<Trait | null> {
    try {
      return await this.service.updateTrait({
        ...args,
        data: {
          ...args.data,

          traitSet: args.data.traitSet
            ? {
                connect: args.data.traitSet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Trait)
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "delete",
    possession: "any",
  })
  async deleteTrait(
    @graphql.Args() args: DeleteTraitArgs
  ): Promise<Trait | null> {
    try {
      return await this.service.deleteTrait(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TraitSet, {
    nullable: true,
    name: "traitSet",
  })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "any",
  })
  async getTraitSet(@graphql.Parent() parent: Trait): Promise<TraitSet | null> {
    const result = await this.service.getTraitSet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
