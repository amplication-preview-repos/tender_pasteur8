/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TraitSetService } from "../traitSet.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TraitSetCreateInput } from "./TraitSetCreateInput";
import { TraitSet } from "./TraitSet";
import { TraitSetFindManyArgs } from "./TraitSetFindManyArgs";
import { TraitSetWhereUniqueInput } from "./TraitSetWhereUniqueInput";
import { TraitSetUpdateInput } from "./TraitSetUpdateInput";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { CharacterWhereUniqueInput } from "../../character/base/CharacterWhereUniqueInput";
import { TraitFindManyArgs } from "../../trait/base/TraitFindManyArgs";
import { Trait } from "../../trait/base/Trait";
import { TraitWhereUniqueInput } from "../../trait/base/TraitWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TraitSetControllerBase {
  constructor(
    protected readonly service: TraitSetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TraitSet })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TraitSetCreateInput,
  })
  async createTraitSet(
    @common.Body() data: TraitSetCreateInput
  ): Promise<TraitSet> {
    return await this.service.createTraitSet({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TraitSet] })
  @ApiNestedQuery(TraitSetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async traitSets(@common.Req() request: Request): Promise<TraitSet[]> {
    const args = plainToClass(TraitSetFindManyArgs, request.query);
    return this.service.traitSets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TraitSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async traitSet(
    @common.Param() params: TraitSetWhereUniqueInput
  ): Promise<TraitSet | null> {
    const result = await this.service.traitSet({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TraitSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TraitSetUpdateInput,
  })
  async updateTraitSet(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() data: TraitSetUpdateInput
  ): Promise<TraitSet | null> {
    try {
      return await this.service.updateTraitSet({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TraitSet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTraitSet(
    @common.Param() params: TraitSetWhereUniqueInput
  ): Promise<TraitSet | null> {
    try {
      return await this.service.deleteTraitSet({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/characters")
  @ApiNestedQuery(CharacterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  async findCharacters(
    @common.Req() request: Request,
    @common.Param() params: TraitSetWhereUniqueInput
  ): Promise<Character[]> {
    const query = plainToClass(CharacterFindManyArgs, request.query);
    const results = await this.service.findCharacters(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        image: true,
        name: true,
        statuses: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async connectCharacters(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        connect: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async updateCharacters(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        set: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async disconnectCharacters(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        disconnect: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/traits")
  @ApiNestedQuery(TraitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "read",
    possession: "any",
  })
  async findTraits(
    @common.Req() request: Request,
    @common.Param() params: TraitSetWhereUniqueInput
  ): Promise<Trait[]> {
    const query = plainToClass(TraitFindManyArgs, request.query);
    const results = await this.service.findTraits(params.id, {
      ...query,
      select: {
        bonus: true,
        createdAt: true,
        formula: true,
        id: true,
        name: true,

        traitSet: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/traits")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async connectTraits(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: TraitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traits: {
        connect: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/traits")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async updateTraits(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: TraitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traits: {
        set: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/traits")
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async disconnectTraits(
    @common.Param() params: TraitSetWhereUniqueInput,
    @common.Body() body: TraitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      traits: {
        disconnect: body,
      },
    };
    await this.service.updateTraitSet({
      where: params,
      data,
      select: { id: true },
    });
  }
}
