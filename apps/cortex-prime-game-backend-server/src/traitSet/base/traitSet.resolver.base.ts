/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TraitSet } from "./TraitSet";
import { TraitSetCountArgs } from "./TraitSetCountArgs";
import { TraitSetFindManyArgs } from "./TraitSetFindManyArgs";
import { TraitSetFindUniqueArgs } from "./TraitSetFindUniqueArgs";
import { CreateTraitSetArgs } from "./CreateTraitSetArgs";
import { UpdateTraitSetArgs } from "./UpdateTraitSetArgs";
import { DeleteTraitSetArgs } from "./DeleteTraitSetArgs";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { TraitFindManyArgs } from "../../trait/base/TraitFindManyArgs";
import { Trait } from "../../trait/base/Trait";
import { TraitSetService } from "../traitSet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TraitSet)
export class TraitSetResolverBase {
  constructor(
    protected readonly service: TraitSetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "any",
  })
  async _traitSetsMeta(
    @graphql.Args() args: TraitSetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TraitSet])
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "any",
  })
  async traitSets(
    @graphql.Args() args: TraitSetFindManyArgs
  ): Promise<TraitSet[]> {
    return this.service.traitSets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TraitSet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "read",
    possession: "own",
  })
  async traitSet(
    @graphql.Args() args: TraitSetFindUniqueArgs
  ): Promise<TraitSet | null> {
    const result = await this.service.traitSet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TraitSet)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "create",
    possession: "any",
  })
  async createTraitSet(
    @graphql.Args() args: CreateTraitSetArgs
  ): Promise<TraitSet> {
    return await this.service.createTraitSet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TraitSet)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "update",
    possession: "any",
  })
  async updateTraitSet(
    @graphql.Args() args: UpdateTraitSetArgs
  ): Promise<TraitSet | null> {
    try {
      return await this.service.updateTraitSet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TraitSet)
  @nestAccessControl.UseRoles({
    resource: "TraitSet",
    action: "delete",
    possession: "any",
  })
  async deleteTraitSet(
    @graphql.Args() args: DeleteTraitSetArgs
  ): Promise<TraitSet | null> {
    try {
      return await this.service.deleteTraitSet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Character], { name: "characters" })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  async findCharacters(
    @graphql.Parent() parent: TraitSet,
    @graphql.Args() args: CharacterFindManyArgs
  ): Promise<Character[]> {
    const results = await this.service.findCharacters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Trait], { name: "traits" })
  @nestAccessControl.UseRoles({
    resource: "Trait",
    action: "read",
    possession: "any",
  })
  async findTraits(
    @graphql.Parent() parent: TraitSet,
    @graphql.Args() args: TraitFindManyArgs
  ): Promise<Trait[]> {
    const results = await this.service.findTraits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
