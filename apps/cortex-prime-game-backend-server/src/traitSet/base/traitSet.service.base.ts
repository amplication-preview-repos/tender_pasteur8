/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TraitSet as PrismaTraitSet,
  Character as PrismaCharacter,
  Trait as PrismaTrait,
} from "@prisma/client";

export class TraitSetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TraitSetCountArgs, "select">): Promise<number> {
    return this.prisma.traitSet.count(args);
  }

  async traitSets(
    args: Prisma.TraitSetFindManyArgs
  ): Promise<PrismaTraitSet[]> {
    return this.prisma.traitSet.findMany(args);
  }
  async traitSet(
    args: Prisma.TraitSetFindUniqueArgs
  ): Promise<PrismaTraitSet | null> {
    return this.prisma.traitSet.findUnique(args);
  }
  async createTraitSet(
    args: Prisma.TraitSetCreateArgs
  ): Promise<PrismaTraitSet> {
    return this.prisma.traitSet.create(args);
  }
  async updateTraitSet(
    args: Prisma.TraitSetUpdateArgs
  ): Promise<PrismaTraitSet> {
    return this.prisma.traitSet.update(args);
  }
  async deleteTraitSet(
    args: Prisma.TraitSetDeleteArgs
  ): Promise<PrismaTraitSet> {
    return this.prisma.traitSet.delete(args);
  }

  async findCharacters(
    parentId: string,
    args: Prisma.CharacterFindManyArgs
  ): Promise<PrismaCharacter[]> {
    return this.prisma.traitSet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .characters(args);
  }

  async findTraits(
    parentId: string,
    args: Prisma.TraitFindManyArgs
  ): Promise<PrismaTrait[]> {
    return this.prisma.traitSet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .traits(args);
  }
}
